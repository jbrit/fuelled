/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LaunchImport } from './routes/launch'
import { Route as AssetidImport } from './routes/$assetid'
import { Route as IndexImport } from './routes/index'

// Create Virtual Routes

const FaucetLazyImport = createFileRoute('/faucet')()

// Create/Update Routes

const FaucetLazyRoute = FaucetLazyImport.update({
  path: '/faucet',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/faucet.lazy').then((d) => d.Route))

const LaunchRoute = LaunchImport.update({
  path: '/launch',
  getParentRoute: () => rootRoute,
} as any)

const AssetidRoute = AssetidImport.update({
  path: '/$assetid',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$assetid': {
      id: '/$assetid'
      path: '/$assetid'
      fullPath: '/$assetid'
      preLoaderRoute: typeof AssetidImport
      parentRoute: typeof rootRoute
    }
    '/launch': {
      id: '/launch'
      path: '/launch'
      fullPath: '/launch'
      preLoaderRoute: typeof LaunchImport
      parentRoute: typeof rootRoute
    }
    '/faucet': {
      id: '/faucet'
      path: '/faucet'
      fullPath: '/faucet'
      preLoaderRoute: typeof FaucetLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$assetid': typeof AssetidRoute
  '/launch': typeof LaunchRoute
  '/faucet': typeof FaucetLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$assetid': typeof AssetidRoute
  '/launch': typeof LaunchRoute
  '/faucet': typeof FaucetLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$assetid': typeof AssetidRoute
  '/launch': typeof LaunchRoute
  '/faucet': typeof FaucetLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$assetid' | '/launch' | '/faucet'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$assetid' | '/launch' | '/faucet'
  id: '__root__' | '/' | '/$assetid' | '/launch' | '/faucet'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AssetidRoute: typeof AssetidRoute
  LaunchRoute: typeof LaunchRoute
  FaucetLazyRoute: typeof FaucetLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AssetidRoute: AssetidRoute,
  LaunchRoute: LaunchRoute,
  FaucetLazyRoute: FaucetLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$assetid",
        "/launch",
        "/faucet"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$assetid": {
      "filePath": "$assetid.tsx"
    },
    "/launch": {
      "filePath": "launch.tsx"
    },
    "/faucet": {
      "filePath": "faucet.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
