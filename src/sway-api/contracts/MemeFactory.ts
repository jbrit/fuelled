/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.8
  Forc version: 0.64.0
  Fuel-Core version: 0.36.0
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  BN,
  Bytes,
  FunctionFragment,
  InvokeFunction,
  StdString,
  StrSlice,
} from 'fuels';

import type { Option, Enum, Result } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum MemeFactoryErrorInput { RegisteredToken = 'RegisteredToken', UnregisteredToken = 'UnregisteredToken', InitializedFactory = 'InitializedFactory', UninitializedFactory = 'UninitializedFactory', ZeroBytecodeRoot = 'ZeroBytecodeRoot', InvalidBytecodeRoot = 'InvalidBytecodeRoot' };
export enum MemeFactoryErrorOutput { RegisteredToken = 'RegisteredToken', UnregisteredToken = 'UnregisteredToken', InitializedFactory = 'InitializedFactory', UninitializedFactory = 'UninitializedFactory', ZeroBytecodeRoot = 'ZeroBytecodeRoot', InvalidBytecodeRoot = 'InvalidBytecodeRoot' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type PoolInitializedInput = { tx_id: string, contract_id: ContractIdInput, asset_id: AssetIdInput, name: StdString, symbol: StdString, dev: IdentityInput, description: StdString, image: StdString, twitter: StdString, telegram: StdString, website: StdString };
export type PoolInitializedOutput = { tx_id: string, contract_id: ContractIdOutput, asset_id: AssetIdOutput, name: StdString, symbol: StdString, dev: IdentityOutput, description: StdString, image: StdString, twitter: StdString, telegram: StdString, website: StdString };
export type TokenBoughtInput = { trader: IdentityInput, asset_id: AssetIdInput, amount: BigNumberish, eth_in: BigNumberish };
export type TokenBoughtOutput = { trader: IdentityOutput, asset_id: AssetIdOutput, amount: BN, eth_in: BN };
export type TokenSoldInput = { trader: IdentityInput, asset_id: AssetIdInput, amount: BigNumberish, eth_out: BigNumberish };
export type TokenSoldOutput = { trader: IdentityOutput, asset_id: AssetIdOutput, amount: BN, eth_out: BN };

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum MemeFactoryError",
      "concreteTypeId": "794d29d75983c8fa0cef91c3c63d848ca1251fbc488645ad04feb98f0f414e71",
      "metadataTypeId": 1
    },
    {
      "type": "enum std::option::Option<b256>",
      "concreteTypeId": "0c2beb9013490c4f753f2757dfe2d8340b22ce3827d596d81d249b7038033cb6",
      "metadataTypeId": 3,
      "typeArguments": [
        "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
      ]
    },
    {
      "type": "enum std::result::Result<b256,str>",
      "concreteTypeId": "72005a1ad434ed967d65131b03a4cc88237886a260812c8996c799ed3067e3cd",
      "metadataTypeId": 4,
      "typeArguments": [
        "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
        "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
      ]
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct PoolInitialized",
      "concreteTypeId": "d9dbe86adbbdafc947802be3d76dcf5f684848a0dd096048699992368aa59dd8",
      "metadataTypeId": 8
    },
    {
      "type": "struct TokenBought",
      "concreteTypeId": "e642f610cd1c3f7c4fe3f0f632791ea614e3b1ae0fe0020987205992d0fa5014",
      "metadataTypeId": 9
    },
    {
      "type": "struct TokenSold",
      "concreteTypeId": "bff64fb7ab914cc84ae1e96229dc5778b595f63b1c2511334d47d8c448e4a3ba",
      "metadataTypeId": 10
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 12
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 15
    },
    {
      "type": "struct std::string::String",
      "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c",
      "metadataTypeId": 16
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "()",
      "metadataTypeId": 0
    },
    {
      "type": "enum MemeFactoryError",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "RegisteredToken",
          "typeId": 0
        },
        {
          "name": "UnregisteredToken",
          "typeId": 0
        },
        {
          "name": "InitializedFactory",
          "typeId": 0
        },
        {
          "name": "UninitializedFactory",
          "typeId": 0
        },
        {
          "name": "ZeroBytecodeRoot",
          "typeId": 0
        },
        {
          "name": "InvalidBytecodeRoot",
          "typeId": 0
        }
      ]
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "Address",
          "typeId": 11
        },
        {
          "name": "ContractId",
          "typeId": 15
        }
      ]
    },
    {
      "type": "enum std::option::Option",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "None",
          "typeId": 0
        },
        {
          "name": "Some",
          "typeId": 6
        }
      ],
      "typeParameters": [
        6
      ]
    },
    {
      "type": "enum std::result::Result",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "Ok",
          "typeId": 6
        },
        {
          "name": "Err",
          "typeId": 5
        }
      ],
      "typeParameters": [
        6,
        5
      ]
    },
    {
      "type": "generic E",
      "metadataTypeId": 5
    },
    {
      "type": "generic T",
      "metadataTypeId": 6
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 7
    },
    {
      "type": "struct PoolInitialized",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "tx_id",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "contract_id",
          "typeId": 15
        },
        {
          "name": "asset_id",
          "typeId": 12
        },
        {
          "name": "name",
          "typeId": 16
        },
        {
          "name": "symbol",
          "typeId": 16
        },
        {
          "name": "dev",
          "typeId": 2
        },
        {
          "name": "description",
          "typeId": 16
        },
        {
          "name": "image",
          "typeId": 16
        },
        {
          "name": "twitter",
          "typeId": 16
        },
        {
          "name": "telegram",
          "typeId": 16
        },
        {
          "name": "website",
          "typeId": 16
        }
      ]
    },
    {
      "type": "struct TokenBought",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "trader",
          "typeId": 2
        },
        {
          "name": "asset_id",
          "typeId": 12
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "eth_in",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct TokenSold",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "trader",
          "typeId": 2
        },
        {
          "name": "asset_id",
          "typeId": 12
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "eth_out",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 12,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::bytes::Bytes",
      "metadataTypeId": 13,
      "components": [
        {
          "name": "buf",
          "typeId": 14
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::bytes::RawBytes",
      "metadataTypeId": 14,
      "components": [
        {
          "name": "ptr",
          "typeId": 7
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 15,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::string::String",
      "metadataTypeId": 16,
      "components": [
        {
          "name": "bytes",
          "typeId": 13
        }
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "child_contract",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "amount",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "max_eth_in",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "buy_token",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        },
        {
          "name": "payable",
          "arguments": []
        }
      ]
    },
    {
      "inputs": [],
      "name": "factory_bytecode_root",
      "output": "0c2beb9013490c4f753f2757dfe2d8340b22ce3827d596d81d249b7038033cb6",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "asset_id",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        }
      ],
      "name": "get_asset_contract",
      "output": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "child_contract",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        }
      ],
      "name": "is_valid",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "child_contract",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "name",
          "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
        },
        {
          "name": "symbol",
          "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
        },
        {
          "name": "description",
          "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
        },
        {
          "name": "image",
          "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
        },
        {
          "name": "twitter",
          "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
        },
        {
          "name": "telegram",
          "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
        },
        {
          "name": "website",
          "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
        }
      ],
      "name": "register_contract",
      "output": "72005a1ad434ed967d65131b03a4cc88237886a260812c8996c799ed3067e3cd",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " SRC12 adaptation"
          ]
        },
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "child_contract",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        },
        {
          "name": "amount",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "min_eth_out",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "name": "sell_token",
      "output": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        },
        {
          "name": "payable",
          "arguments": []
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "child_contract",
          "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54"
        }
      ],
      "name": "set_bytecode_root",
      "output": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "8740688456692517114",
      "concreteTypeId": "794d29d75983c8fa0cef91c3c63d848ca1251fbc488645ad04feb98f0f414e71"
    },
    {
      "logId": "16592094529207418748",
      "concreteTypeId": "e642f610cd1c3f7c4fe3f0f632791ea614e3b1ae0fe0020987205992d0fa5014"
    },
    {
      "logId": "15698396471780814793",
      "concreteTypeId": "d9dbe86adbbdafc947802be3d76dcf5f684848a0dd096048699992368aa59dd8"
    },
    {
      "logId": "13832330955791092936",
      "concreteTypeId": "bff64fb7ab914cc84ae1e96229dc5778b595f63b1c2511334d47d8c448e4a3ba"
    }
  ],
  "messagesTypes": [],
  "configurables": []
};

const storageSlots: StorageSlot[] = [
  {
    "key": "34e010f370fab3f283e1a61b0a87ea2d4ce5b859545d07705c1ecdcea4296c02",
    "value": "0000000000000000000000000000000000000000000000000000000000000000"
  }
];

export class MemeFactoryInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    buy_token: FunctionFragment;
    factory_bytecode_root: FunctionFragment;
    get_asset_contract: FunctionFragment;
    is_valid: FunctionFragment;
    register_contract: FunctionFragment;
    sell_token: FunctionFragment;
    set_bytecode_root: FunctionFragment;
  };
}

export class MemeFactory extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: MemeFactoryInterface;
  declare functions: {
    buy_token: InvokeFunction<[child_contract: ContractIdInput, amount: BigNumberish, max_eth_in: BigNumberish], BN>;
    factory_bytecode_root: InvokeFunction<[], Option<string>>;
    get_asset_contract: InvokeFunction<[asset_id: AssetIdInput], ContractIdOutput>;
    is_valid: InvokeFunction<[child_contract: ContractIdInput], boolean>;
    register_contract: InvokeFunction<[child_contract: ContractIdInput, name: StdString, symbol: StdString, description: StdString, image: StdString, twitter: StdString, telegram: StdString, website: StdString], Result<string, StrSlice>>;
    sell_token: InvokeFunction<[child_contract: ContractIdInput, amount: BigNumberish, min_eth_out: BigNumberish], BN>;
    set_bytecode_root: InvokeFunction<[child_contract: ContractIdInput], string>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
